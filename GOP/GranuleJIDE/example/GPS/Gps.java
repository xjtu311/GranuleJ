import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.net.InetAddress;
import java.net.ServerSocket;
import java.net.Socket;
import java.net.UnknownHostException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;

import javax.swing.GroupLayout;
import javax.swing.JFrame;
import javax.swing.LayoutStyle;

/*
 * aaa.java
 *
 * Created on __DATE__, __TIME__
 */

/**
 * 
 * @author Shaoying.Chang
 */
public class Gps extends JFrame {
	private String city;
	private String park;
	private String scene;
	private String museum;
	private String room;
	private String net;
	private Thread thread;

	private static boolean KEY = false;
	private static int PORT = 8877;

	// Variables declaration - do not modify
	private javax.swing.JTextField cityTextField;
	private javax.swing.JLabel jLabel1;
	private javax.swing.JLabel jLabel2;
	private javax.swing.JLabel jLabel3;
	private javax.swing.JLabel jLabel4;
	private javax.swing.JLabel jLabel5;
	private javax.swing.JLabel jLabel6;
	private javax.swing.JScrollPane jScrollPane1;
	private javax.swing.JTextArea resultTextArea;
	private javax.swing.JTextField museumTextField;
	private javax.swing.JTextField netTextField;
	private javax.swing.JTextField parkTextField;
	private javax.swing.JButton publishButton;
	private javax.swing.JTextField roomTextField;
	private javax.swing.JTextField sceneTextField;
	private javax.swing.JButton stopButton;

	// End of variables declaration//GEN-END:variables

	/** Creates new form aaa */
	public Gps() {
		initComponents();
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	// GEN-BEGIN:initComponents
	// <editor-fold defaultstate="collapsed" desc="Generated Code">
	private void initComponents() {
		jLabel1 = new javax.swing.JLabel();
		cityTextField = new javax.swing.JTextField();
		jLabel2 = new javax.swing.JLabel();
		parkTextField = new javax.swing.JTextField();
		jLabel3 = new javax.swing.JLabel();
		sceneTextField = new javax.swing.JTextField();
		jLabel4 = new javax.swing.JLabel();
		museumTextField = new javax.swing.JTextField();
		jLabel5 = new javax.swing.JLabel();
		roomTextField = new javax.swing.JTextField();
		jLabel6 = new javax.swing.JLabel();
		netTextField = new javax.swing.JTextField();

		publishButton = new javax.swing.JButton();
		stopButton = new javax.swing.JButton();

		jScrollPane1 = new javax.swing.JScrollPane();
		resultTextArea = new javax.swing.JTextArea();
		setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

		publishButton.setText("Publish");
		publishButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				publishButtonActionPerformed(evt);
			}
		});
		stopButton.setText("Stop");
		stopButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				stopButtonActionPerformed(evt);
			}
		});

		jLabel1.setText("City :");
		jLabel2.setText("Park :");
		jLabel3.setText("Scene :");
		jLabel4.setText("Museum :");
		jLabel5.setText("Room :");
		jLabel6.setText("Net :");

		resultTextArea.setColumns(20);
		resultTextArea.setRows(5);
		resultTextArea.setEditable(false);

		jScrollPane1.setViewportView(resultTextArea);

		GroupLayout layout = new GroupLayout(getContentPane());
		getContentPane().setLayout(layout);
		layout.setHorizontalGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING).addGroup(
				layout.createSequentialGroup().addContainerGap().addGroup(
						layout.createParallelGroup(GroupLayout.Alignment.LEADING).addComponent(jScrollPane1, GroupLayout.DEFAULT_SIZE, 321, Short.MAX_VALUE).addGroup(
								layout.createSequentialGroup().addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING).addComponent(jLabel1).addComponent(jLabel2)).addGap(58, 58, 58).addGroup(
										layout.createParallelGroup(GroupLayout.Alignment.LEADING, false).addComponent(sceneTextField, GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 230, Short.MAX_VALUE).addComponent(parkTextField, GroupLayout.Alignment.TRAILING).addComponent(cityTextField, GroupLayout.Alignment.TRAILING))).addComponent(jLabel3).addGroup(
								GroupLayout.Alignment.TRAILING,
								layout.createSequentialGroup().addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING).addComponent(jLabel4).addComponent(jLabel5).addComponent(jLabel6)).addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, 34, Short.MAX_VALUE).addGroup(
										layout.createParallelGroup(GroupLayout.Alignment.LEADING, false).addComponent(netTextField).addComponent(roomTextField, GroupLayout.Alignment.TRAILING).addComponent(museumTextField, GroupLayout.Alignment.TRAILING, GroupLayout.DEFAULT_SIZE, 230, Short.MAX_VALUE))).addGroup(GroupLayout.Alignment.TRAILING,
								layout.createSequentialGroup().addComponent(publishButton).addGap(58, 58, 58).addComponent(stopButton).addGap(40, 40, 40))).addContainerGap()));

		layout.setVerticalGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING).addGroup(
				layout.createSequentialGroup().addContainerGap().addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE).addComponent(jLabel1).addComponent(cityTextField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)).addPreferredGap(LayoutStyle.ComponentPlacement.RELATED).addGroup(
						layout.createParallelGroup(GroupLayout.Alignment.BASELINE).addComponent(jLabel2).addComponent(parkTextField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)).addPreferredGap(LayoutStyle.ComponentPlacement.RELATED).addGroup(
						layout.createParallelGroup(GroupLayout.Alignment.BASELINE).addComponent(jLabel3).addComponent(sceneTextField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)).addPreferredGap(LayoutStyle.ComponentPlacement.RELATED).addGroup(
						layout.createParallelGroup(GroupLayout.Alignment.BASELINE).addComponent(jLabel4).addComponent(museumTextField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)).addPreferredGap(LayoutStyle.ComponentPlacement.RELATED).addGroup(
						layout.createParallelGroup(GroupLayout.Alignment.BASELINE).addComponent(jLabel5).addComponent(roomTextField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)).addPreferredGap(LayoutStyle.ComponentPlacement.RELATED).addGroup(
						layout.createParallelGroup(GroupLayout.Alignment.BASELINE).addComponent(netTextField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE).addComponent(jLabel6)).addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED).addGroup(
						layout.createParallelGroup(GroupLayout.Alignment.BASELINE).addComponent(publishButton).addComponent(stopButton)).addPreferredGap(LayoutStyle.ComponentPlacement.RELATED).addComponent(jScrollPane1, GroupLayout.DEFAULT_SIZE, 187, Short.MAX_VALUE).addContainerGap()));

		pack();
	}// </editor-fold>

	// GEN-END:initComponents

	private void stopButtonActionPerformed(java.awt.event.ActionEvent evt) {
		KEY = false;
		this.dispose();
	}

	private void publishButtonActionPerformed(java.awt.event.ActionEvent evt) {
		this.setCity(cityTextField.getText());
		this.setPark(parkTextField.getText());
		this.setScene(sceneTextField.getText());
		this.setMuseum(museumTextField.getText());
		this.setRoom(roomTextField.getText());
		this.setNet(netTextField.getText());

		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd hh:mm:ss");
		Date date = new Date();
		String time = sdf.format(date);

		InetAddress addr = null;
		try {
			addr = InetAddress.getLocalHost();
		} catch (UnknownHostException e) {
			e.printStackTrace();
		}
		String ip = addr.getHostAddress().toString();

		StringBuffer result = new StringBuffer();
		result.append(" Ip = " + ip + "   Port = " + PORT);
		result.append("\n " + "Time = " + time);
		result.append("\n --------------------------------------------------------------------");
		result.append("\n City = " + city);
		result.append("\n Park = " + park);
		result.append("\n Scene = " + scene);
		result.append("\n Muesum = " + museum);
		result.append("\n Room = " + room);
		result.append("\n Net = " + net);
		resultTextArea.setText(result.toString());
	}

	/**
	 * @param args
	 *            the command line arguments
	 */
	public static void main(String args[]) {
		Gps gps = new Gps();
		gps.setVisible(true);
		try {
			ServerSocket server = new ServerSocket(PORT);
			while (KEY) {
				Socket s = server.accept();
				Runnable r = new ProcessGps(gps.city, gps.park, gps.scene, gps.museum, gps.room, gps.net, s);
				Thread thr = new Thread(r);
				gps.setThread(thr);
				thr.start();
			}
			server.close();
		} catch (IOException e) {
			e.printStackTrace();
		}

	}

	public Thread getThread() {
		return thread;
	}

	public void setThread(Thread thread) {
		this.thread = thread;
	}

	public String getCity() {
		return city;
	}

	public void setCity(String city) {
		this.city = city;
	}

	public String getPark() {
		return park;
	}

	public void setPark(String park) {
		this.park = park;
	}

	public String getScene() {
		return scene;
	}

	public void setScene(String scene) {
		this.scene = scene;
	}

	public String getRoom() {
		return room;
	}

	public void setRoom(String room) {
		this.room = room;
	}

	public String getNet() {
		return net;
	}

	public void setNet(String net) {
		this.net = net;
	}

	public String getMuseum() {
		return museum;
	}

	public void setMuseum(String museum) {
		this.museum = museum;
	}

}
