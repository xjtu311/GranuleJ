/* The following code was generated by JFlex 1.4 on 13-3-14 ÉÏÎç10:11 */

package scanner;

import beaver.Symbol;
import beaver.Scanner;
import parser.JavaParser.Terminals;
import java.io.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4
 * on 13-3-14 ÉÏÎç10:11 from the specification file
 * <tt>D:/zhh/GopCompiler/scanner/JavaScanner.flex</tt>
 */
public final class JavaScanner extends Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int STRING = 1;
  public static final int YYINITIAL = 0;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\7\1\3\1\1\1\0\1\3\1\2\14\7\1\104\1\7\4\0"+
    "\1\3\1\74\1\21\1\0\1\6\1\103\1\100\1\20\1\61\1\62"+
    "\1\5\1\17\1\70\1\54\1\15\1\4\1\10\3\23\4\14\2\13"+
    "\1\77\1\67\1\73\1\71\1\72\1\76\1\55\3\12\1\60\1\16"+
    "\1\57\5\6\1\56\13\6\1\11\2\6\1\65\1\22\1\66\1\102"+
    "\1\6\1\0\1\24\1\31\1\32\1\43\1\26\1\44\1\47\1\40"+
    "\1\41\1\6\1\36\1\34\1\50\1\35\1\33\1\46\1\6\1\27"+
    "\1\25\1\30\1\42\1\51\1\52\1\45\1\37\1\53\1\63\1\101"+
    "\1\64\1\75\41\7\2\0\4\6\4\0\1\6\2\0\1\7\7\0"+
    "\1\6\4\0\1\6\5\0\27\6\1\0\37\6\1\0\u013f\6\31\0"+
    "\162\6\4\0\14\6\16\0\5\6\11\0\1\6\21\0\130\7\5\0"+
    "\23\7\12\0\1\6\13\0\1\6\1\0\3\6\1\0\1\6\1\0"+
    "\24\6\1\0\54\6\1\0\46\6\1\0\5\6\4\0\202\6\1\0"+
    "\4\7\3\0\105\6\1\0\46\6\2\0\2\6\6\0\20\6\41\0"+
    "\46\6\2\0\1\6\7\0\47\6\11\0\21\7\1\0\27\7\1\0"+
    "\3\7\1\0\1\7\1\0\2\7\1\0\1\7\13\0\33\6\5\0"+
    "\3\6\15\0\4\7\14\0\6\7\13\0\32\6\5\0\13\6\16\7"+
    "\7\0\12\7\4\0\2\6\1\7\143\6\1\0\1\6\10\7\1\0"+
    "\6\7\2\6\2\7\1\0\4\7\2\6\12\7\3\6\2\0\1\6"+
    "\17\0\1\7\1\6\1\7\36\6\33\7\2\0\3\6\60\0\46\6"+
    "\13\7\1\6\u014f\0\3\7\66\6\2\0\1\7\1\6\20\7\2\0"+
    "\1\6\4\7\3\0\12\6\2\7\2\0\12\7\21\0\3\7\1\0"+
    "\10\6\2\0\2\6\2\0\26\6\1\0\7\6\1\0\1\6\3\0"+
    "\4\6\2\0\1\7\1\6\7\7\2\0\2\7\2\0\3\7\11\0"+
    "\1\7\4\0\2\6\1\0\3\6\2\7\2\0\12\7\4\6\15\0"+
    "\3\7\1\0\6\6\4\0\2\6\2\0\26\6\1\0\7\6\1\0"+
    "\2\6\1\0\2\6\1\0\2\6\2\0\1\7\1\0\5\7\4\0"+
    "\2\7\2\0\3\7\13\0\4\6\1\0\1\6\7\0\14\7\3\6"+
    "\14\0\3\7\1\0\11\6\1\0\3\6\1\0\26\6\1\0\7\6"+
    "\1\0\2\6\1\0\5\6\2\0\1\7\1\6\10\7\1\0\3\7"+
    "\1\0\3\7\2\0\1\6\17\0\2\6\2\7\2\0\12\7\1\0"+
    "\1\6\17\0\3\7\1\0\10\6\2\0\2\6\2\0\26\6\1\0"+
    "\7\6\1\0\2\6\1\0\5\6\2\0\1\7\1\6\6\7\3\0"+
    "\2\7\2\0\3\7\10\0\2\7\4\0\2\6\1\0\3\6\4\0"+
    "\12\7\1\0\1\6\20\0\1\7\1\6\1\0\6\6\3\0\3\6"+
    "\1\0\4\6\3\0\2\6\1\0\1\6\1\0\2\6\3\0\2\6"+
    "\3\0\3\6\3\0\10\6\1\0\3\6\4\0\5\7\3\0\3\7"+
    "\1\0\4\7\11\0\1\7\17\0\11\7\11\0\1\6\7\0\3\7"+
    "\1\0\10\6\1\0\3\6\1\0\27\6\1\0\12\6\1\0\5\6"+
    "\4\0\7\7\1\0\3\7\1\0\4\7\7\0\2\7\11\0\2\6"+
    "\4\0\12\7\22\0\2\7\1\0\10\6\1\0\3\6\1\0\27\6"+
    "\1\0\12\6\1\0\5\6\2\0\1\7\1\6\7\7\1\0\3\7"+
    "\1\0\4\7\7\0\2\7\7\0\1\6\1\0\2\6\4\0\12\7"+
    "\22\0\2\7\1\0\10\6\1\0\3\6\1\0\27\6\1\0\20\6"+
    "\4\0\6\7\2\0\3\7\1\0\4\7\11\0\1\7\10\0\2\6"+
    "\4\0\12\7\22\0\2\7\1\0\22\6\3\0\30\6\1\0\11\6"+
    "\1\0\1\6\2\0\7\6\3\0\1\7\4\0\6\7\1\0\1\7"+
    "\1\0\10\7\22\0\2\7\15\0\60\6\1\7\2\6\7\7\4\0"+
    "\10\6\10\7\1\0\12\7\47\0\2\6\1\0\1\6\2\0\2\6"+
    "\1\0\1\6\2\0\1\6\6\0\4\6\1\0\7\6\1\0\3\6"+
    "\1\0\1\6\1\0\1\6\2\0\2\6\1\0\4\6\1\7\2\6"+
    "\6\7\1\0\2\7\1\6\2\0\5\6\1\0\1\6\1\0\6\7"+
    "\2\0\12\7\2\0\2\6\42\0\1\6\27\0\2\7\6\0\12\7"+
    "\13\0\1\7\1\0\1\7\1\0\1\7\4\0\2\7\10\6\1\0"+
    "\42\6\6\0\24\7\1\0\2\7\4\6\4\0\10\7\1\0\44\7"+
    "\11\0\1\7\71\0\42\6\1\0\5\6\1\0\2\6\1\0\7\7"+
    "\3\0\4\7\6\0\12\7\6\0\6\6\4\7\106\0\46\6\12\0"+
    "\51\6\7\0\132\6\5\0\104\6\5\0\122\6\6\0\7\6\1\0"+
    "\77\6\1\0\1\6\1\0\4\6\2\0\7\6\1\0\1\6\1\0"+
    "\4\6\2\0\47\6\1\0\1\6\1\0\4\6\2\0\37\6\1\0"+
    "\1\6\1\0\4\6\2\0\7\6\1\0\1\6\1\0\4\6\2\0"+
    "\7\6\1\0\7\6\1\0\27\6\1\0\37\6\1\0\1\6\1\0"+
    "\4\6\2\0\7\6\1\0\47\6\1\0\23\6\16\0\11\7\56\0"+
    "\125\6\14\0\u026c\6\2\0\10\6\12\0\32\6\5\0\113\6\3\0"+
    "\3\6\17\0\15\6\1\0\4\6\3\7\13\0\22\6\3\7\13\0"+
    "\22\6\2\7\14\0\15\6\1\0\3\6\1\0\2\7\14\0\64\6"+
    "\40\7\3\0\1\6\3\0\2\6\1\7\2\0\12\7\41\0\3\7"+
    "\2\0\12\7\6\0\130\6\10\0\51\6\1\7\126\0\35\6\3\0"+
    "\14\7\4\0\14\7\12\0\12\7\36\6\2\0\5\6\u038b\0\154\6"+
    "\224\0\234\6\4\0\132\6\6\0\26\6\2\0\6\6\2\0\46\6"+
    "\2\0\6\6\2\0\10\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\37\6\2\0\65\6\1\0\7\6\1\0\1\6\3\0\3\6"+
    "\1\0\7\6\3\0\4\6\2\0\6\6\4\0\15\6\5\0\3\6"+
    "\1\0\7\6\17\0\4\7\32\0\5\7\20\0\2\6\23\0\1\6"+
    "\13\0\4\7\6\0\6\7\1\0\1\6\15\0\1\6\40\0\22\6"+
    "\36\0\15\7\4\0\1\7\3\0\6\7\27\0\1\6\4\0\1\6"+
    "\2\0\12\6\1\0\1\6\3\0\5\6\6\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\4\6\1\0\3\6\1\0\7\6\3\0\3\6"+
    "\5\0\5\6\26\0\44\6\u0e81\0\3\6\31\0\11\6\6\7\1\0"+
    "\5\6\2\0\5\6\4\0\126\6\2\0\2\7\2\0\3\6\1\0"+
    "\137\6\5\0\50\6\4\0\136\6\21\0\30\6\70\0\20\6\u0200\0"+
    "\u19b6\6\112\0\u51a6\6\132\0\u048d\6\u0773\0\u2ba4\6\134\0\u0800\6\u1900\0"+
    "\u012e\6\2\0\73\6\225\0\7\6\14\0\5\6\5\0\1\6\1\7"+
    "\12\6\1\0\15\6\1\0\5\6\1\0\1\6\1\0\2\6\1\0"+
    "\2\6\1\0\154\6\41\0\u016b\6\22\0\100\6\2\0\66\6\50\0"+
    "\15\6\3\0\20\7\20\0\4\7\17\0\2\6\30\0\3\6\31\0"+
    "\1\6\6\0\5\6\1\0\207\6\2\0\1\7\4\0\1\6\13\0"+
    "\12\7\7\0\32\6\4\0\1\6\1\0\32\6\12\0\132\6\3\0"+
    "\6\6\2\0\6\6\2\0\6\6\2\0\3\6\3\0\2\6\3\0"+
    "\2\6\22\0\3\7\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\2\2\1\3\1\4\1\5\2\6\1\7"+
    "\1\10\1\1\1\11\20\5\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\2\41\1\42\1\1\1\2\1\0"+
    "\1\43\1\44\1\6\2\0\1\45\1\0\1\46\1\47"+
    "\1\50\1\0\1\51\1\52\1\0\2\53\1\0\37\5"+
    "\1\54\2\5\1\55\14\5\1\56\1\57\1\60\1\61"+
    "\1\62\1\63\1\64\1\65\1\66\1\67\1\70\1\71"+
    "\1\72\1\73\1\74\2\75\1\76\1\77\1\100\1\101"+
    "\1\102\1\103\1\104\1\105\1\0\1\106\1\6\1\45"+
    "\1\0\1\107\1\110\12\74\22\5\1\111\22\5\1\112"+
    "\2\5\1\113\4\5\1\114\15\5\1\115\1\116\1\117"+
    "\1\75\1\0\1\120\1\0\1\121\1\122\1\123\1\124"+
    "\1\125\1\126\1\127\1\130\4\5\1\131\6\5\1\132"+
    "\1\133\5\5\1\134\1\5\1\135\1\136\3\5\1\137"+
    "\1\140\5\5\1\141\1\5\1\142\1\143\1\5\1\144"+
    "\17\5\1\145\1\5\1\146\2\5\1\147\3\5\1\150"+
    "\3\5\1\151\1\152\7\5\1\153\1\5\1\154\1\5"+
    "\1\155\2\5\1\156\10\5\1\157\1\160\10\5\1\161"+
    "\1\5\1\162\1\163\1\5\1\164\2\5\1\165\3\5"+
    "\1\166\2\5\1\167\1\170\3\5\1\0\1\171\2\5"+
    "\1\172\2\5\1\173\6\5\1\174\2\5\1\175\4\5"+
    "\1\176\1\177\1\200\1\5\1\201\1\5\1\202\1\0"+
    "\3\5\1\203\1\204\1\205\2\5\1\206\1\207\1\210"+
    "\1\5\1\211\1\212\1\5\1\213\1\5\1\214\1\0"+
    "\3\5\1\215\1\5\1\216\1\5\1\217\1\0\1\5"+
    "\1\220\1\5\1\221\1\5\1\0\1\222\1\223\1\5"+
    "\1\0\1\224\1\0\1\225";

  private static int [] zzUnpackAction() {
    int [] result = new int[431];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\105\0\212\0\212\0\317\0\u0114\0\u0159\0\u019e"+
    "\0\u01e3\0\u0228\0\u026d\0\u02b2\0\u02f7\0\212\0\u033c\0\u0381"+
    "\0\u03c6\0\u040b\0\u0450\0\u0495\0\u04da\0\u051f\0\u0564\0\u05a9"+
    "\0\u05ee\0\u0633\0\u0678\0\u06bd\0\u0702\0\u0747\0\u078c\0\212"+
    "\0\212\0\212\0\212\0\212\0\212\0\212\0\212\0\212"+
    "\0\u07d1\0\u0816\0\u085b\0\u08a0\0\212\0\212\0\212\0\u08e5"+
    "\0\u092a\0\u096f\0\u09b4\0\212\0\u09f9\0\212\0\u0a3e\0\212"+
    "\0\u0a83\0\u0ac8\0\u0b0d\0\212\0\212\0\u0b52\0\u0b97\0\u0bdc"+
    "\0\u0c21\0\u0c66\0\212\0\212\0\212\0\u0cab\0\212\0\212"+
    "\0\u0cf0\0\212\0\u0d35\0\u0d7a\0\u0dbf\0\u0e04\0\u0e49\0\u0e8e"+
    "\0\u0ed3\0\u0f18\0\u0f5d\0\u0fa2\0\u0fe7\0\u102c\0\u1071\0\u10b6"+
    "\0\u10fb\0\u1140\0\u1185\0\u11ca\0\u120f\0\u1254\0\u1299\0\u12de"+
    "\0\u1323\0\u1368\0\u13ad\0\u13f2\0\u1437\0\u147c\0\u14c1\0\u1506"+
    "\0\u154b\0\u1590\0\u15d5\0\u019e\0\u161a\0\u165f\0\u16a4\0\u16e9"+
    "\0\u172e\0\u1773\0\u17b8\0\u17fd\0\u1842\0\u1887\0\u18cc\0\u1911"+
    "\0\u1956\0\u199b\0\u19e0\0\212\0\212\0\212\0\212\0\u1a25"+
    "\0\212\0\u1a6a\0\212\0\212\0\212\0\212\0\212\0\212"+
    "\0\212\0\212\0\u1aaf\0\u1af4\0\212\0\212\0\212\0\212"+
    "\0\212\0\212\0\212\0\212\0\u1b39\0\212\0\u1b7e\0\u1bc3"+
    "\0\u1c08\0\212\0\212\0\u1c4d\0\u1c92\0\u1cd7\0\u1d1c\0\u1d61"+
    "\0\u1da6\0\u1deb\0\u1e30\0\u1e75\0\u1eba\0\u1eff\0\u1f44\0\u1f89"+
    "\0\u1fce\0\u2013\0\u2058\0\u209d\0\u20e2\0\u2127\0\u216c\0\u21b1"+
    "\0\u21f6\0\u223b\0\u2280\0\u22c5\0\u230a\0\u234f\0\u2394\0\u019e"+
    "\0\u23d9\0\u241e\0\u2463\0\u24a8\0\u24ed\0\u2532\0\u2577\0\u25bc"+
    "\0\u2601\0\u2646\0\u268b\0\u26d0\0\u2715\0\u275a\0\u279f\0\u27e4"+
    "\0\u2829\0\u286e\0\u019e\0\u28b3\0\u28f8\0\u293d\0\u2982\0\u29c7"+
    "\0\u2a0c\0\u2a51\0\u019e\0\u2a96\0\u2adb\0\u2b20\0\u2b65\0\u2baa"+
    "\0\u2bef\0\u2c34\0\u2c79\0\u2cbe\0\u2d03\0\u2d48\0\u2d8d\0\u2dd2"+
    "\0\212\0\u2e17\0\212\0\212\0\u1c92\0\212\0\u2e5c\0\212"+
    "\0\212\0\212\0\212\0\212\0\212\0\212\0\212\0\u2ea1"+
    "\0\u2ee6\0\u2f2b\0\u2f70\0\u019e\0\u2fb5\0\u2ffa\0\u303f\0\u3084"+
    "\0\u30c9\0\u310e\0\u019e\0\u019e\0\u3153\0\u3198\0\u31dd\0\u3222"+
    "\0\u3267\0\u019e\0\u32ac\0\u019e\0\u019e\0\u32f1\0\u3336\0\u337b"+
    "\0\u019e\0\u019e\0\u33c0\0\u3405\0\u344a\0\u348f\0\u34d4\0\u019e"+
    "\0\u3519\0\u019e\0\u019e\0\u355e\0\u019e\0\u35a3\0\u35e8\0\u362d"+
    "\0\u3672\0\u36b7\0\u36fc\0\u3741\0\u3786\0\u37cb\0\u3810\0\u3855"+
    "\0\u389a\0\u38df\0\u3924\0\u3969\0\u019e\0\u39ae\0\u019e\0\u39f3"+
    "\0\u3a38\0\212\0\u3a7d\0\u3ac2\0\u3b07\0\u019e\0\u3b4c\0\u3b91"+
    "\0\u3bd6\0\u019e\0\u019e\0\u3c1b\0\u3c60\0\u3ca5\0\u3cea\0\u3d2f"+
    "\0\u3d74\0\u3db9\0\u3dfe\0\u3e43\0\u019e\0\u3e88\0\u019e\0\u3ecd"+
    "\0\u3f12\0\u019e\0\u3f57\0\u3f9c\0\u3fe1\0\u4026\0\u406b\0\u40b0"+
    "\0\u40f5\0\u413a\0\u019e\0\u417f\0\u41c4\0\u4209\0\u424e\0\u4293"+
    "\0\u42d8\0\u431d\0\u4362\0\u43a7\0\u019e\0\u43ec\0\u019e\0\u019e"+
    "\0\u4431\0\u019e\0\u4476\0\u44bb\0\u019e\0\u4500\0\u4545\0\u458a"+
    "\0\u019e\0\u45cf\0\u4614\0\u019e\0\u019e\0\u4659\0\u469e\0\u46e3"+
    "\0\u4728\0\u019e\0\u476d\0\u47b2\0\u019e\0\u47f7\0\u483c\0\u019e"+
    "\0\u4881\0\u48c6\0\u490b\0\u4950\0\u4995\0\u49da\0\u019e\0\u4a1f"+
    "\0\u4a64\0\u019e\0\u4aa9\0\u4aee\0\u4b33\0\u4b78\0\u019e\0\u019e"+
    "\0\u019e\0\u4bbd\0\u019e\0\u4c02\0\u019e\0\u4c47\0\u4c8c\0\u4cd1"+
    "\0\u4d16\0\u019e\0\u019e\0\u019e\0\u4d5b\0\u4da0\0\u019e\0\u019e"+
    "\0\u019e\0\u4de5\0\u019e\0\u019e\0\u4e2a\0\u019e\0\u4e6f\0\u019e"+
    "\0\u4eb4\0\u4ef9\0\u4f3e\0\u4f83\0\u019e\0\u4fc8\0\u019e\0\u500d"+
    "\0\u019e\0\u5052\0\u5097\0\u019e\0\u50dc\0\u019e\0\u5121\0\u5166"+
    "\0\u019e\0\u019e\0\u51ab\0\u51f0\0\u019e\0\u5235\0\212";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[431];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\1\5\1\4\1\6\1\7\1\10\1\3"+
    "\1\11\2\10\2\12\1\13\1\10\1\14\1\15\1\16"+
    "\1\3\1\12\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\10\1\26\1\27\3\10\1\30\1\10\1\31"+
    "\1\32\1\10\1\33\1\34\1\10\1\35\1\36\1\10"+
    "\1\37\1\40\3\10\1\41\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55"+
    "\1\56\1\57\1\60\1\61\1\62\1\63\1\64\1\65"+
    "\1\66\1\67\16\65\1\70\1\71\62\65\106\0\1\4"+
    "\107\0\1\72\1\73\63\0\1\74\104\0\1\75\21\0"+
    "\7\10\1\0\1\10\4\0\31\10\2\0\3\10\23\0"+
    "\1\10\10\0\1\76\1\77\1\0\1\100\1\76\1\101"+
    "\1\102\4\0\1\76\2\0\1\102\5\0\1\103\6\0"+
    "\1\104\1\105\1\77\10\0\1\103\1\105\1\104\34\0"+
    "\1\12\2\0\2\12\1\101\1\102\4\0\1\12\2\0"+
    "\1\102\5\0\1\103\6\0\1\104\1\105\11\0\1\103"+
    "\1\105\1\104\34\0\1\101\2\0\2\101\1\106\5\0"+
    "\1\101\100\0\1\107\51\0\1\110\13\0\1\111\1\112"+
    "\1\113\15\111\1\0\1\111\1\114\62\111\6\0\7\10"+
    "\1\0\1\10\4\0\2\10\1\115\1\10\1\116\1\10"+
    "\1\117\12\10\1\120\7\10\2\0\3\10\23\0\1\10"+
    "\6\0\7\10\1\0\1\10\4\0\3\10\1\121\1\10"+
    "\1\122\6\10\1\123\1\124\1\10\1\125\7\10\1\126"+
    "\1\10\2\0\3\10\23\0\1\10\6\0\7\10\1\0"+
    "\1\10\4\0\11\10\1\127\1\130\7\10\1\131\6\10"+
    "\2\0\3\10\23\0\1\10\6\0\7\10\1\0\1\10"+
    "\4\0\3\10\1\132\13\10\1\133\11\10\2\0\3\10"+
    "\23\0\1\10\6\0\7\10\1\0\1\10\4\0\4\10"+
    "\1\134\10\10\1\135\13\10\2\0\3\10\23\0\1\10"+
    "\6\0\7\10\1\0\1\10\4\0\1\10\1\136\1\10"+
    "\1\137\1\140\3\10\1\141\3\10\1\142\14\10\2\0"+
    "\3\10\23\0\1\10\6\0\7\10\1\0\1\10\4\0"+
    "\1\10\1\143\6\10\1\144\1\145\3\10\1\146\13\10"+
    "\2\0\3\10\23\0\1\10\6\0\7\10\1\0\1\10"+
    "\4\0\10\10\1\147\20\10\2\0\3\10\23\0\1\10"+
    "\6\0\7\10\1\0\1\10\4\0\1\10\1\150\1\10"+
    "\1\151\13\10\1\152\11\10\2\0\3\10\23\0\1\10"+
    "\6\0\7\10\1\0\1\10\4\0\12\10\1\153\6\10"+
    "\1\154\3\10\1\155\3\10\2\0\3\10\23\0\1\10"+
    "\6\0\7\10\1\0\1\10\4\0\3\10\1\156\4\10"+
    "\1\157\20\10\2\0\3\10\23\0\1\10\6\0\7\10"+
    "\1\0\1\10\4\0\1\10\1\160\6\10\1\161\1\162"+
    "\4\10\1\163\12\10\2\0\3\10\23\0\1\10\6\0"+
    "\7\10\1\0\1\10\4\0\1\10\1\164\2\10\1\165"+
    "\12\10\1\166\11\10\2\0\3\10\23\0\1\10\6\0"+
    "\7\10\1\0\1\10\4\0\4\10\1\167\3\10\1\170"+
    "\20\10\2\0\3\10\23\0\1\10\6\0\7\10\1\0"+
    "\1\10\4\0\10\10\1\171\20\10\2\0\3\10\23\0"+
    "\1\10\6\0\7\10\1\0\1\10\4\0\15\10\1\172"+
    "\1\173\12\10\2\0\3\10\23\0\1\10\54\0\1\174"+
    "\14\0\1\175\104\0\1\176\104\0\1\177\1\200\103\0"+
    "\1\201\1\0\1\202\102\0\1\203\104\0\1\204\6\0"+
    "\1\205\75\0\1\206\7\0\1\207\74\0\1\210\104\0"+
    "\1\211\13\0\1\65\2\0\16\65\2\0\62\65\1\0"+
    "\1\66\103\0\1\212\1\0\6\212\1\213\3\212\1\214"+
    "\3\212\1\215\1\216\1\217\1\213\3\212\1\220\1\221"+
    "\1\222\3\212\1\223\6\212\1\224\40\212\1\72\1\4"+
    "\1\5\102\72\5\73\1\225\77\73\10\0\1\76\2\0"+
    "\1\100\1\76\1\101\1\102\4\0\1\76\2\0\1\102"+
    "\5\0\1\226\6\0\1\104\1\105\11\0\1\226\1\105"+
    "\1\104\34\0\1\227\1\0\3\227\1\0\1\227\4\0"+
    "\2\227\1\0\1\227\2\0\2\227\10\0\2\227\12\0"+
    "\2\227\34\0\1\100\2\0\2\100\1\101\1\102\4\0"+
    "\1\100\2\0\1\102\14\0\1\104\1\105\12\0\1\105"+
    "\1\104\34\0\1\101\2\0\2\101\1\0\1\102\4\0"+
    "\1\101\2\0\1\102\14\0\1\104\1\105\12\0\1\105"+
    "\1\104\34\0\1\230\2\0\2\230\2\0\1\231\3\0"+
    "\1\230\30\0\1\231\45\0\1\232\107\0\1\233\65\0"+
    "\1\112\103\0\1\212\1\0\6\212\1\234\3\212\1\235"+
    "\3\212\1\236\1\237\1\240\1\234\3\212\1\241\1\242"+
    "\1\243\3\212\1\244\6\212\1\245\40\212\6\0\7\10"+
    "\1\0\1\10\4\0\2\10\1\246\26\10\2\0\3\10"+
    "\23\0\1\10\6\0\7\10\1\0\1\10\4\0\10\10"+
    "\1\247\20\10\2\0\3\10\23\0\1\10\6\0\7\10"+
    "\1\0\1\10\4\0\2\10\1\250\26\10\2\0\3\10"+
    "\23\0\1\10\6\0\7\10\1\0\1\10\4\0\5\10"+
    "\1\251\23\10\2\0\3\10\23\0\1\10\6\0\7\10"+
    "\1\0\1\10\4\0\3\10\1\252\25\10\2\0\3\10"+
    "\23\0\1\10\6\0\7\10\1\0\1\10\4\0\1\10"+
    "\1\253\2\10\1\254\24\10\2\0\3\10\23\0\1\10"+
    "\6\0\7\10\1\0\1\10\4\0\12\10\1\255\16\10"+
    "\2\0\3\10\23\0\1\10\6\0\7\10\1\0\1\10"+
    "\4\0\10\10\1\256\20\10\2\0\3\10\23\0\1\10"+
    "\6\0\7\10\1\0\1\10\4\0\23\10\1\257\5\10"+
    "\2\0\3\10\23\0\1\10\6\0\7\10\1\0\1\10"+
    "\4\0\16\10\1\260\12\10\2\0\3\10\23\0\1\10"+
    "\6\0\7\10\1\0\1\10\4\0\2\10\1\261\26\10"+
    "\2\0\3\10\23\0\1\10\6\0\7\10\1\0\1\10"+
    "\4\0\17\10\1\262\11\10\2\0\3\10\23\0\1\10"+
    "\6\0\7\10\1\0\1\10\4\0\5\10\1\263\15\10"+
    "\1\264\5\10\2\0\3\10\23\0\1\10\6\0\7\10"+
    "\1\0\1\10\4\0\5\10\1\265\23\10\2\0\3\10"+
    "\23\0\1\10\6\0\7\10\1\0\1\10\4\0\12\10"+
    "\1\266\16\10\2\0\3\10\23\0\1\10\6\0\7\10"+
    "\1\0\1\10\4\0\1\10\1\267\12\10\1\270\2\10"+
    "\1\271\11\10\2\0\3\10\23\0\1\10\6\0\7\10"+
    "\1\0\1\10\4\0\4\10\1\272\11\10\1\273\12\10"+
    "\2\0\3\10\23\0\1\10\6\0\7\10\1\0\1\10"+
    "\4\0\2\10\1\274\26\10\2\0\3\10\23\0\1\10"+
    "\6\0\7\10\1\0\1\10\4\0\21\10\1\275\7\10"+
    "\2\0\3\10\23\0\1\10\6\0\7\10\1\0\1\10"+
    "\4\0\3\10\1\276\25\10\2\0\3\10\23\0\1\10"+
    "\6\0\7\10\1\0\1\10\4\0\10\10\1\277\20\10"+
    "\2\0\3\10\23\0\1\10\6\0\7\10\1\0\1\10"+
    "\4\0\5\10\1\300\23\10\2\0\3\10\23\0\1\10"+
    "\6\0\7\10\1\0\1\10\4\0\2\10\1\301\2\10"+
    "\1\302\23\10\2\0\3\10\23\0\1\10\6\0\7\10"+
    "\1\0\1\10\4\0\12\10\1\303\12\10\1\304\3\10"+
    "\2\0\3\10\23\0\1\10\6\0\7\10\1\0\1\10"+
    "\4\0\1\10\1\305\27\10\2\0\3\10\23\0\1\10"+
    "\6\0\7\10\1\0\1\10\4\0\1\10\1\306\1\10"+
    "\1\307\25\10\2\0\3\10\23\0\1\10\6\0\7\10"+
    "\1\0\1\10\4\0\1\10\1\310\10\10\1\311\16\10"+
    "\2\0\3\10\23\0\1\10\6\0\7\10\1\0\1\10"+
    "\4\0\5\10\1\312\23\10\2\0\3\10\23\0\1\10"+
    "\6\0\7\10\1\0\1\10\4\0\27\10\1\313\1\10"+
    "\2\0\3\10\23\0\1\10\6\0\7\10\1\0\1\10"+
    "\4\0\11\10\1\314\17\10\2\0\3\10\23\0\1\10"+
    "\6\0\7\10\1\0\1\10\4\0\2\10\1\315\2\10"+
    "\1\316\23\10\2\0\3\10\23\0\1\10\6\0\7\10"+
    "\1\0\1\10\4\0\23\10\1\317\5\10\2\0\3\10"+
    "\23\0\1\10\6\0\7\10\1\0\1\10\4\0\21\10"+
    "\1\320\7\10\2\0\3\10\23\0\1\10\6\0\7\10"+
    "\1\0\1\10\4\0\17\10\1\321\11\10\2\0\3\10"+
    "\23\0\1\10\6\0\7\10\1\0\1\10\4\0\11\10"+
    "\1\322\17\10\2\0\3\10\23\0\1\10\6\0\7\10"+
    "\1\0\1\10\4\0\4\10\1\323\24\10\2\0\3\10"+
    "\23\0\1\10\6\0\7\10\1\0\1\10\4\0\10\10"+
    "\1\324\20\10\2\0\3\10\23\0\1\10\6\0\7\10"+
    "\1\0\1\10\4\0\12\10\1\325\16\10\2\0\3\10"+
    "\23\0\1\10\6\0\7\10\1\0\1\10\4\0\7\10"+
    "\1\326\21\10\2\0\3\10\23\0\1\10\6\0\7\10"+
    "\1\0\1\10\4\0\3\10\1\327\4\10\1\330\5\10"+
    "\1\331\12\10\2\0\3\10\23\0\1\10\6\0\7\10"+
    "\1\0\1\10\4\0\6\10\1\332\22\10\2\0\3\10"+
    "\23\0\1\10\6\0\7\10\1\0\1\10\4\0\1\10"+
    "\1\333\27\10\2\0\3\10\23\0\1\10\6\0\7\10"+
    "\1\0\1\10\4\0\5\10\1\334\23\10\2\0\3\10"+
    "\23\0\1\10\6\0\7\10\1\0\1\10\4\0\11\10"+
    "\1\335\4\10\1\336\12\10\2\0\3\10\23\0\1\10"+
    "\6\0\7\10\1\0\1\10\4\0\16\10\1\337\12\10"+
    "\2\0\3\10\23\0\1\10\6\0\7\10\1\0\1\10"+
    "\4\0\5\10\1\340\23\10\2\0\3\10\23\0\1\10"+
    "\71\0\1\341\1\342\103\0\1\343\23\0\1\214\3\0"+
    "\1\214\6\0\1\214\71\0\1\344\3\0\1\344\6\0"+
    "\1\344\61\0\4\73\1\4\1\225\77\73\10\0\1\227"+
    "\1\0\3\227\1\0\1\227\4\0\2\227\1\0\1\227"+
    "\2\0\2\227\1\0\1\226\6\0\2\227\11\0\1\226"+
    "\2\227\34\0\1\230\2\0\2\230\6\0\1\230\17\0"+
    "\1\104\1\105\12\0\1\105\1\104\34\0\1\230\2\0"+
    "\2\230\6\0\1\230\71\0\1\345\3\0\1\345\3\0"+
    "\1\346\2\0\1\345\71\0\1\347\3\0\1\347\3\0"+
    "\1\346\2\0\1\347\101\0\1\350\104\0\1\351\104\0"+
    "\1\352\104\0\1\353\104\0\1\354\104\0\1\355\104\0"+
    "\1\356\104\0\1\357\72\0\7\10\1\0\1\10\4\0"+
    "\3\10\1\360\25\10\2\0\3\10\23\0\1\10\6\0"+
    "\7\10\1\0\1\10\4\0\17\10\1\361\11\10\2\0"+
    "\3\10\23\0\1\10\6\0\7\10\1\0\1\10\4\0"+
    "\5\10\1\362\23\10\2\0\3\10\23\0\1\10\6\0"+
    "\7\10\1\0\1\10\4\0\3\10\1\363\25\10\2\0"+
    "\3\10\23\0\1\10\6\0\7\10\1\0\1\10\4\0"+
    "\20\10\1\364\10\10\2\0\3\10\23\0\1\10\6\0"+
    "\7\10\1\0\1\10\4\0\5\10\1\365\23\10\2\0"+
    "\3\10\23\0\1\10\6\0\7\10\1\0\1\10\4\0"+
    "\16\10\1\366\12\10\2\0\3\10\23\0\1\10\6\0"+
    "\7\10\1\0\1\10\4\0\7\10\1\367\21\10\2\0"+
    "\3\10\23\0\1\10\6\0\7\10\1\0\1\10\4\0"+
    "\4\10\1\370\24\10\2\0\3\10\23\0\1\10\6\0"+
    "\7\10\1\0\1\10\4\0\3\10\1\371\25\10\2\0"+
    "\3\10\23\0\1\10\6\0\7\10\1\0\1\10\4\0"+
    "\5\10\1\372\23\10\2\0\3\10\23\0\1\10\6\0"+
    "\7\10\1\0\1\10\4\0\3\10\1\373\25\10\2\0"+
    "\3\10\23\0\1\10\6\0\7\10\1\0\1\10\4\0"+
    "\25\10\1\374\3\10\2\0\3\10\23\0\1\10\6\0"+
    "\7\10\1\0\1\10\4\0\3\10\1\375\25\10\2\0"+
    "\3\10\23\0\1\10\6\0\7\10\1\0\1\10\4\0"+
    "\1\10\1\376\27\10\2\0\3\10\23\0\1\10\6\0"+
    "\7\10\1\0\1\10\4\0\17\10\1\377\11\10\2\0"+
    "\3\10\23\0\1\10\6\0\7\10\1\0\1\10\4\0"+
    "\5\10\1\u0100\23\10\2\0\3\10\23\0\1\10\6\0"+
    "\7\10\1\0\1\10\4\0\12\10\1\u0101\16\10\2\0"+
    "\3\10\23\0\1\10\6\0\7\10\1\0\1\10\4\0"+
    "\3\10\1\u0102\25\10\2\0\3\10\23\0\1\10\6\0"+
    "\7\10\1\0\1\10\4\0\10\10\1\u0103\20\10\2\0"+
    "\3\10\23\0\1\10\6\0\7\10\1\0\1\10\4\0"+
    "\2\10\1\u0104\26\10\2\0\3\10\23\0\1\10\6\0"+
    "\7\10\1\0\1\10\4\0\3\10\1\u0105\25\10\2\0"+
    "\3\10\23\0\1\10\6\0\7\10\1\0\1\10\4\0"+
    "\10\10\1\u0106\20\10\2\0\3\10\23\0\1\10\6\0"+
    "\7\10\1\0\1\10\4\0\1\10\1\u0107\27\10\2\0"+
    "\3\10\23\0\1\10\6\0\7\10\1\0\1\10\4\0"+
    "\11\10\1\u0108\17\10\2\0\3\10\23\0\1\10\6\0"+
    "\7\10\1\0\1\10\4\0\3\10\1\u0109\25\10\2\0"+
    "\3\10\23\0\1\10\6\0\7\10\1\0\1\10\4\0"+
    "\3\10\1\u010a\25\10\2\0\3\10\23\0\1\10\6\0"+
    "\7\10\1\0\1\10\4\0\7\10\1\u010b\21\10\2\0"+
    "\3\10\23\0\1\10\6\0\7\10\1\0\1\10\4\0"+
    "\2\10\1\u010c\2\10\1\u010d\23\10\2\0\3\10\23\0"+
    "\1\10\6\0\7\10\1\0\1\10\4\0\23\10\1\u010e"+
    "\5\10\2\0\3\10\23\0\1\10\6\0\7\10\1\0"+
    "\1\10\4\0\2\10\1\u010f\26\10\2\0\3\10\23\0"+
    "\1\10\6\0\7\10\1\0\1\10\4\0\4\10\1\u0110"+
    "\24\10\2\0\3\10\23\0\1\10\6\0\7\10\1\0"+
    "\1\10\4\0\7\10\1\u0111\21\10\2\0\3\10\23\0"+
    "\1\10\6\0\7\10\1\0\1\10\4\0\20\10\1\u0112"+
    "\10\10\2\0\3\10\23\0\1\10\6\0\7\10\1\0"+
    "\1\10\4\0\24\10\1\u0113\4\10\2\0\3\10\23\0"+
    "\1\10\6\0\7\10\1\0\1\10\4\0\16\10\1\u0114"+
    "\12\10\2\0\3\10\23\0\1\10\6\0\7\10\1\0"+
    "\1\10\4\0\11\10\1\u0115\17\10\2\0\3\10\23\0"+
    "\1\10\6\0\7\10\1\0\1\10\4\0\5\10\1\u0116"+
    "\23\10\2\0\3\10\23\0\1\10\6\0\7\10\1\0"+
    "\1\10\4\0\3\10\1\u0117\25\10\2\0\3\10\23\0"+
    "\1\10\6\0\7\10\1\0\1\10\4\0\10\10\1\u0118"+
    "\1\u0119\17\10\2\0\3\10\23\0\1\10\6\0\7\10"+
    "\1\0\1\10\4\0\1\10\1\u011a\27\10\2\0\3\10"+
    "\23\0\1\10\6\0\7\10\1\0\1\10\4\0\6\10"+
    "\1\u011b\22\10\2\0\3\10\23\0\1\10\6\0\7\10"+
    "\1\0\1\10\4\0\2\10\1\271\26\10\2\0\3\10"+
    "\23\0\1\10\6\0\7\10\1\0\1\10\4\0\1\10"+
    "\1\u011c\27\10\2\0\3\10\23\0\1\10\6\0\7\10"+
    "\1\0\1\10\4\0\1\10\1\u011d\27\10\2\0\3\10"+
    "\23\0\1\10\6\0\7\10\1\0\1\10\4\0\13\10"+
    "\1\u011e\15\10\2\0\3\10\23\0\1\10\6\0\7\10"+
    "\1\0\1\10\4\0\26\10\1\u011f\2\10\2\0\3\10"+
    "\23\0\1\10\6\0\7\10\1\0\1\10\4\0\5\10"+
    "\1\u0120\1\10\1\u0121\21\10\2\0\3\10\23\0\1\10"+
    "\6\0\7\10\1\0\1\10\4\0\26\10\1\u0122\2\10"+
    "\2\0\3\10\23\0\1\10\6\0\7\10\1\0\1\10"+
    "\4\0\11\10\1\u0123\17\10\2\0\3\10\23\0\1\10"+
    "\6\0\7\10\1\0\1\10\4\0\12\10\1\u0124\16\10"+
    "\2\0\3\10\23\0\1\10\6\0\7\10\1\0\1\10"+
    "\4\0\10\10\1\u0125\20\10\2\0\3\10\23\0\1\10"+
    "\6\0\7\10\1\0\1\10\4\0\1\10\1\u0126\27\10"+
    "\2\0\3\10\23\0\1\10\6\0\7\10\1\0\1\10"+
    "\4\0\20\10\1\u0127\10\10\2\0\3\10\23\0\1\10"+
    "\6\0\7\10\1\0\1\10\4\0\11\10\1\u0128\17\10"+
    "\2\0\3\10\23\0\1\10\6\0\7\10\1\0\1\10"+
    "\4\0\15\10\1\u0129\13\10\2\0\3\10\23\0\1\10"+
    "\71\0\1\u012a\33\0\1\346\72\0\7\10\1\0\1\10"+
    "\4\0\4\10\1\u012b\24\10\2\0\3\10\23\0\1\10"+
    "\6\0\7\10\1\0\1\10\4\0\12\10\1\u012c\16\10"+
    "\2\0\3\10\23\0\1\10\6\0\7\10\1\0\1\10"+
    "\4\0\4\10\1\u012d\24\10\2\0\3\10\23\0\1\10"+
    "\6\0\7\10\1\0\1\10\4\0\4\10\1\u012e\24\10"+
    "\2\0\3\10\23\0\1\10\6\0\7\10\1\0\1\10"+
    "\4\0\16\10\1\u012f\12\10\2\0\3\10\23\0\1\10"+
    "\6\0\7\10\1\0\1\10\4\0\7\10\1\u0130\21\10"+
    "\2\0\3\10\23\0\1\10\6\0\7\10\1\0\1\10"+
    "\4\0\15\10\1\u0131\13\10\2\0\3\10\23\0\1\10"+
    "\6\0\7\10\1\0\1\10\4\0\5\10\1\u0132\23\10"+
    "\2\0\3\10\23\0\1\10\6\0\7\10\1\0\1\10"+
    "\4\0\4\10\1\u0133\24\10\2\0\3\10\23\0\1\10"+
    "\6\0\7\10\1\0\1\10\4\0\7\10\1\u0134\21\10"+
    "\2\0\3\10\23\0\1\10\6\0\7\10\1\0\1\10"+
    "\4\0\4\10\1\u0135\5\10\1\u0136\16\10\2\0\3\10"+
    "\23\0\1\10\6\0\7\10\1\0\1\10\4\0\12\10"+
    "\1\u0137\16\10\2\0\3\10\23\0\1\10\6\0\7\10"+
    "\1\0\1\10\4\0\4\10\1\u0138\24\10\2\0\3\10"+
    "\23\0\1\10\6\0\7\10\1\0\1\10\4\0\16\10"+
    "\1\u0139\12\10\2\0\3\10\23\0\1\10\6\0\7\10"+
    "\1\0\1\10\4\0\2\10\1\u013a\26\10\2\0\3\10"+
    "\23\0\1\10\6\0\7\10\1\0\1\10\4\0\27\10"+
    "\1\u013b\1\10\2\0\3\10\23\0\1\10\6\0\7\10"+
    "\1\0\1\10\4\0\4\10\1\u013c\24\10\2\0\3\10"+
    "\23\0\1\10\6\0\7\10\1\0\1\10\4\0\13\10"+
    "\1\u013d\15\10\2\0\3\10\23\0\1\10\6\0\7\10"+
    "\1\0\1\10\4\0\3\10\1\u013e\25\10\2\0\3\10"+
    "\23\0\1\10\6\0\7\10\1\0\1\10\4\0\15\10"+
    "\1\u013f\13\10\2\0\3\10\23\0\1\10\6\0\7\10"+
    "\1\0\1\10\4\0\5\10\1\u0125\23\10\2\0\3\10"+
    "\23\0\1\10\6\0\7\10\1\0\1\10\4\0\16\10"+
    "\1\u0140\12\10\2\0\3\10\23\0\1\10\6\0\7\10"+
    "\1\0\1\10\4\0\16\10\1\u0141\12\10\2\0\3\10"+
    "\23\0\1\10\6\0\7\10\1\0\1\10\4\0\2\10"+
    "\1\u0142\26\10\2\0\3\10\23\0\1\10\6\0\7\10"+
    "\1\0\1\10\4\0\13\10\1\u0143\15\10\2\0\3\10"+
    "\23\0\1\10\6\0\7\10\1\0\1\10\4\0\26\10"+
    "\1\u0144\2\10\2\0\3\10\23\0\1\10\6\0\7\10"+
    "\1\0\1\10\4\0\1\10\1\u0145\27\10\2\0\3\10"+
    "\23\0\1\10\6\0\7\10\1\0\1\10\4\0\4\10"+
    "\1\u0146\24\10\2\0\3\10\23\0\1\10\6\0\7\10"+
    "\1\0\1\10\4\0\4\10\1\u0147\24\10\2\0\3\10"+
    "\23\0\1\10\6\0\7\10\1\0\1\10\4\0\3\10"+
    "\1\u0148\25\10\2\0\3\10\23\0\1\10\6\0\7\10"+
    "\1\0\1\10\4\0\17\10\1\u0149\11\10\2\0\3\10"+
    "\23\0\1\10\6\0\7\10\1\0\1\10\4\0\11\10"+
    "\1\u014a\17\10\2\0\3\10\23\0\1\10\6\0\7\10"+
    "\1\0\1\10\4\0\5\10\1\u014b\23\10\2\0\3\10"+
    "\23\0\1\10\6\0\7\10\1\0\1\10\4\0\11\10"+
    "\1\u014c\17\10\2\0\3\10\23\0\1\10\6\0\7\10"+
    "\1\0\1\10\4\0\1\10\1\u014d\27\10\2\0\3\10"+
    "\23\0\1\10\6\0\7\10\1\0\1\10\4\0\16\10"+
    "\1\u014e\12\10\2\0\3\10\23\0\1\10\6\0\7\10"+
    "\1\0\1\10\4\0\3\10\1\u014f\25\10\2\0\3\10"+
    "\23\0\1\10\6\0\7\10\1\0\1\10\4\0\3\10"+
    "\1\u0150\25\10\2\0\3\10\23\0\1\10\6\0\7\10"+
    "\1\0\1\10\4\0\1\10\1\u0151\27\10\2\0\3\10"+
    "\23\0\1\10\6\0\7\10\1\0\1\10\4\0\16\10"+
    "\1\u0152\12\10\2\0\3\10\23\0\1\10\6\0\7\10"+
    "\1\0\1\10\4\0\17\10\1\u0153\11\10\2\0\3\10"+
    "\23\0\1\10\6\0\7\10\1\0\1\10\4\0\5\10"+
    "\1\u0154\23\10\2\0\3\10\23\0\1\10\6\0\7\10"+
    "\1\0\1\10\4\0\3\10\1\u0155\25\10\2\0\3\10"+
    "\23\0\1\10\6\0\7\10\1\0\1\10\4\0\16\10"+
    "\1\u0156\12\10\2\0\3\10\23\0\1\10\6\0\7\10"+
    "\1\0\1\10\4\0\5\10\1\u0157\23\10\2\0\3\10"+
    "\23\0\1\10\6\0\7\10\1\0\1\10\4\0\20\10"+
    "\1\u0158\10\10\2\0\3\10\23\0\1\10\6\0\7\10"+
    "\1\0\1\10\4\0\1\10\1\u0159\27\10\2\0\3\10"+
    "\23\0\1\10\6\0\7\10\1\0\1\10\4\0\7\10"+
    "\1\u015a\21\10\2\0\3\10\23\0\1\10\6\0\7\10"+
    "\1\0\1\10\4\0\5\10\1\u015b\23\10\2\0\3\10"+
    "\23\0\1\10\6\0\7\10\1\0\1\10\4\0\4\10"+
    "\1\u015c\24\10\2\0\3\10\23\0\1\10\6\0\7\10"+
    "\1\0\1\10\4\0\15\10\1\u015d\13\10\2\0\3\10"+
    "\23\0\1\10\6\0\7\10\1\0\1\10\4\0\12\10"+
    "\1\u015e\16\10\2\0\3\10\23\0\1\10\6\0\7\10"+
    "\1\0\1\10\4\0\20\10\1\u015f\10\10\2\0\3\10"+
    "\23\0\1\10\6\0\7\10\1\0\1\10\4\0\20\10"+
    "\1\u0160\10\10\2\0\3\10\23\0\1\10\6\0\7\10"+
    "\1\0\1\10\4\0\12\10\1\u0161\16\10\2\0\3\10"+
    "\23\0\1\10\6\0\7\10\1\0\1\10\4\0\25\10"+
    "\1\u0162\3\10\2\0\3\10\23\0\1\10\6\0\7\10"+
    "\1\0\1\10\4\0\16\10\1\u0163\12\10\2\0\3\10"+
    "\23\0\1\10\6\0\7\10\1\0\1\10\4\0\2\10"+
    "\1\u0164\26\10\2\0\3\10\23\0\1\10\6\0\7\10"+
    "\1\0\1\10\4\0\3\10\1\u0165\25\10\2\0\3\10"+
    "\23\0\1\10\6\0\7\10\1\0\1\10\4\0\1\10"+
    "\1\u0166\27\10\2\0\3\10\23\0\1\10\6\0\7\10"+
    "\1\0\1\10\4\0\12\10\1\u0167\16\10\2\0\3\10"+
    "\23\0\1\10\6\0\7\10\1\0\1\10\4\0\11\10"+
    "\1\u0168\17\10\2\0\3\10\23\0\1\10\6\0\7\10"+
    "\1\0\1\10\4\0\31\10\1\u0169\1\0\3\10\23\0"+
    "\1\10\6\0\7\10\1\0\1\10\4\0\3\10\1\u016a"+
    "\25\10\2\0\3\10\23\0\1\10\6\0\7\10\1\0"+
    "\1\10\4\0\12\10\1\u016b\16\10\2\0\3\10\23\0"+
    "\1\10\6\0\7\10\1\0\1\10\4\0\21\10\1\u016c"+
    "\7\10\2\0\3\10\23\0\1\10\6\0\7\10\1\0"+
    "\1\10\4\0\5\10\1\u016d\23\10\2\0\3\10\23\0"+
    "\1\10\6\0\7\10\1\0\1\10\4\0\25\10\1\u016e"+
    "\3\10\2\0\3\10\23\0\1\10\6\0\7\10\1\0"+
    "\1\10\4\0\11\10\1\u016f\17\10\2\0\3\10\23\0"+
    "\1\10\6\0\7\10\1\0\1\10\4\0\3\10\1\u0170"+
    "\25\10\2\0\3\10\23\0\1\10\6\0\7\10\1\0"+
    "\1\10\4\0\11\10\1\u0171\17\10\2\0\3\10\23\0"+
    "\1\10\6\0\7\10\1\0\1\10\4\0\24\10\1\u0172"+
    "\4\10\2\0\3\10\23\0\1\10\6\0\7\10\1\0"+
    "\1\10\4\0\10\10\1\u0173\20\10\2\0\3\10\23\0"+
    "\1\10\6\0\7\10\1\0\1\10\4\0\7\10\1\u0174"+
    "\21\10\2\0\3\10\23\0\1\10\6\0\7\10\1\0"+
    "\1\10\4\0\3\10\1\u0175\25\10\2\0\3\10\23\0"+
    "\1\10\6\0\7\10\1\0\1\10\4\0\5\10\1\u0176"+
    "\23\10\2\0\3\10\23\0\1\10\6\0\7\10\1\0"+
    "\1\10\4\0\7\10\1\u0177\21\10\2\0\3\10\23\0"+
    "\1\10\6\0\7\10\1\0\1\10\4\0\11\10\1\u0178"+
    "\17\10\2\0\3\10\23\0\1\10\6\0\7\10\1\0"+
    "\1\10\4\0\16\10\1\u0179\12\10\2\0\3\10\23\0"+
    "\1\10\6\0\7\10\1\0\1\10\4\0\12\10\1\u017a"+
    "\16\10\2\0\3\10\23\0\1\10\6\0\7\10\1\0"+
    "\1\10\4\0\7\10\1\u017b\21\10\2\0\3\10\23\0"+
    "\1\10\6\0\7\10\1\0\1\10\4\0\21\10\1\u017c"+
    "\7\10\2\0\3\10\23\0\1\10\6\0\7\10\1\0"+
    "\1\10\4\0\10\10\1\u017d\20\10\2\0\3\10\23\0"+
    "\1\10\6\0\7\10\1\0\1\10\4\0\1\10\1\u017e"+
    "\27\10\2\0\3\10\23\0\1\10\6\0\7\10\1\0"+
    "\1\10\4\0\2\10\1\u017f\26\10\2\0\3\10\23\0"+
    "\1\10\6\0\7\10\1\0\1\10\4\0\2\10\1\u0180"+
    "\26\10\2\0\3\10\23\0\1\10\6\0\7\10\1\0"+
    "\1\10\4\0\3\10\1\u0181\25\10\2\0\3\10\23\0"+
    "\1\10\6\0\7\10\1\0\1\10\4\0\3\10\1\u0182"+
    "\25\10\2\0\3\10\23\0\1\10\6\0\7\10\1\0"+
    "\1\10\4\0\12\10\1\u0183\16\10\2\0\3\10\23\0"+
    "\1\10\6\0\7\10\1\0\1\10\4\0\17\10\1\u0184"+
    "\11\10\2\0\3\10\23\0\1\10\6\0\7\10\1\0"+
    "\1\10\4\0\3\10\1\u0185\25\10\2\0\3\10\23\0"+
    "\1\10\44\0\1\u0186\46\0\7\10\1\0\1\10\4\0"+
    "\7\10\1\u0187\21\10\2\0\3\10\23\0\1\10\6\0"+
    "\7\10\1\0\1\10\4\0\1\10\1\u0188\27\10\2\0"+
    "\3\10\23\0\1\10\6\0\7\10\1\0\1\10\4\0"+
    "\3\10\1\u0189\25\10\2\0\3\10\23\0\1\10\6\0"+
    "\7\10\1\0\1\10\4\0\5\10\1\u018a\23\10\2\0"+
    "\3\10\23\0\1\10\6\0\7\10\1\0\1\10\4\0"+
    "\14\10\1\u018b\14\10\2\0\3\10\23\0\1\10\6\0"+
    "\7\10\1\0\1\10\4\0\3\10\1\u018c\25\10\2\0"+
    "\3\10\23\0\1\10\6\0\7\10\1\0\1\10\4\0"+
    "\17\10\1\u018d\11\10\2\0\3\10\23\0\1\10\6\0"+
    "\7\10\1\0\1\10\4\0\5\10\1\u018e\23\10\2\0"+
    "\3\10\23\0\1\10\6\0\7\10\1\0\1\10\4\0"+
    "\20\10\1\u018f\10\10\2\0\3\10\23\0\1\10\6\0"+
    "\7\10\1\0\1\10\4\0\3\10\1\u0190\25\10\2\0"+
    "\3\10\23\0\1\10\6\0\7\10\1\0\1\10\4\0"+
    "\3\10\1\u0191\25\10\2\0\3\10\23\0\1\10\6\0"+
    "\7\10\1\0\1\10\4\0\11\10\1\u0192\17\10\2\0"+
    "\3\10\23\0\1\10\6\0\7\10\1\0\1\10\4\0"+
    "\5\10\1\u0193\23\10\2\0\3\10\23\0\1\10\6\0"+
    "\7\10\1\0\1\10\4\0\23\10\1\u0194\5\10\2\0"+
    "\3\10\23\0\1\10\6\0\7\10\1\0\1\10\4\0"+
    "\12\10\1\u0195\16\10\2\0\3\10\23\0\1\10\6\0"+
    "\7\10\1\0\1\10\4\0\11\10\1\u0196\17\10\2\0"+
    "\3\10\23\0\1\10\6\0\7\10\1\0\1\10\4\0"+
    "\12\10\1\u0197\16\10\2\0\3\10\23\0\1\10\6\0"+
    "\7\10\1\0\1\10\4\0\3\10\1\u0198\25\10\2\0"+
    "\3\10\23\0\1\10\41\0\1\u0199\51\0\7\10\1\0"+
    "\1\10\4\0\3\10\1\u019a\25\10\2\0\3\10\23\0"+
    "\1\10\6\0\7\10\1\0\1\10\4\0\7\10\1\u019b"+
    "\21\10\2\0\3\10\23\0\1\10\6\0\7\10\1\0"+
    "\1\10\4\0\12\10\1\u019c\16\10\2\0\3\10\23\0"+
    "\1\10\6\0\7\10\1\0\1\10\4\0\2\10\1\u019d"+
    "\26\10\2\0\3\10\23\0\1\10\6\0\7\10\1\0"+
    "\1\10\4\0\3\10\1\u019e\25\10\2\0\3\10\23\0"+
    "\1\10\6\0\7\10\1\0\1\10\4\0\3\10\1\u019f"+
    "\25\10\2\0\3\10\23\0\1\10\6\0\7\10\1\0"+
    "\1\10\4\0\16\10\1\u01a0\12\10\2\0\3\10\23\0"+
    "\1\10\6\0\7\10\1\0\1\10\4\0\5\10\1\u01a1"+
    "\23\10\2\0\3\10\23\0\1\10\30\0\1\u01a2\62\0"+
    "\7\10\1\0\1\10\4\0\10\10\1\u01a3\20\10\2\0"+
    "\3\10\23\0\1\10\6\0\7\10\1\0\1\10\4\0"+
    "\3\10\1\u01a4\25\10\2\0\3\10\23\0\1\10\6\0"+
    "\7\10\1\0\1\10\4\0\5\10\1\u01a5\23\10\2\0"+
    "\3\10\23\0\1\10\6\0\7\10\1\0\1\10\4\0"+
    "\20\10\1\u01a6\10\10\2\0\3\10\23\0\1\10\6\0"+
    "\7\10\1\0\1\10\4\0\30\10\1\u01a7\2\0\3\10"+
    "\23\0\1\10\35\0\1\u01a8\55\0\7\10\1\0\1\10"+
    "\4\0\21\10\1\u01a9\7\10\2\0\3\10\23\0\1\10"+
    "\6\0\7\10\1\0\1\10\4\0\2\10\1\u01aa\26\10"+
    "\2\0\3\10\23\0\1\10\6\0\7\10\1\0\1\10"+
    "\4\0\3\10\1\u01ab\25\10\2\0\3\10\23\0\1\10"+
    "\26\0\1\u01ac\64\0\7\10\1\0\1\10\4\0\20\10"+
    "\1\u01ad\10\10\2\0\3\10\23\0\1\10\25\0\1\u01ae"+
    "\104\0\1\u01af\57\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[21114];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\2\11\11\1\1\11\21\1\11\11\4\1\3\11"+
    "\4\1\1\11\1\1\1\11\1\1\1\11\2\1\1\0"+
    "\2\11\1\1\2\0\1\1\1\0\3\11\1\0\2\11"+
    "\1\0\1\11\1\1\1\0\57\1\4\11\1\1\1\11"+
    "\1\1\10\11\2\1\10\11\1\0\1\11\2\1\1\0"+
    "\2\11\105\1\1\11\1\1\2\11\1\0\1\11\1\0"+
    "\10\11\72\1\1\11\76\1\1\0\34\1\1\0\22\1"+
    "\1\0\10\1\1\0\5\1\1\0\3\1\1\0\1\1"+
    "\1\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[431];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
  StringBuffer strbuf = new StringBuffer(128);
  int sub_line;
  int sub_column;

  private Symbol sym(short id) {
    return new Symbol(id, yyline + 1, yycolumn + 1, len(), str());
  }

  private Symbol sym(short id, String value) {
    return new Symbol(id, yyline + 1, yycolumn + 1, len(), value);
  }

  private String str() { return yytext(); }
  private int len() { return yylength(); }

  private void error(String msg) throws Scanner.Exception {
    throw new Scanner.Exception(yyline + 1, yycolumn + 1, msg);
  }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public JavaScanner(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public JavaScanner(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1788) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzPushbackPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead < 0) {
      return true;
    }
    else {
      zzEndRead+= numRead;
      return false;
    }
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Symbol nextToken() throws java.io.IOException, Scanner.Exception {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 84: 
          { return sym(Terminals.CHARACTER_LITERAL, "\r");
          }
        case 150: break;
        case 60: 
          { error("illegal escape sequence \""+str()+"\"");
          }
        case 151: break;
        case 33: 
          { error("unterminated string at end of line");
          }
        case 152: break;
        case 39: 
          { return sym(Terminals.DOUBLE_LITERAL, str().substring(0,len()-1));
          }
        case 153: break;
        case 149: 
          { return sym(Terminals.CHECKFITNESS);
          }
        case 154: break;
        case 7: 
          { return sym(Terminals.DOT);
          }
        case 155: break;
        case 137: 
          { return sym(Terminals.ABSTRACT);
          }
        case 156: break;
        case 16: 
          { return sym(Terminals.LBRACK);
          }
        case 157: break;
        case 71: 
          { return sym(Terminals.ELLIPSIS);
          }
        case 158: break;
        case 68: 
          { strbuf.append( '\n' );
          }
        case 159: break;
        case 98: 
          { return sym(Terminals.LOAD);
          }
        case 160: break;
        case 96: 
          { return sym(Terminals.CASE);
          }
        case 161: break;
        case 40: 
          { return sym(Terminals.FLOATING_POINT_LITERAL, str().substring(0,len()-1));
          }
        case 162: break;
        case 62: 
          { strbuf.append( '\'' );
          }
        case 163: break;
        case 11: 
          { return sym(Terminals.AT);
          }
        case 164: break;
        case 14: 
          { return sym(Terminals.LBRACE);
          }
        case 165: break;
        case 53: 
          { return sym(Terminals.NOTEQ);
          }
        case 166: break;
        case 122: 
          { return sym(Terminals.IMPORT);
          }
        case 167: break;
        case 37: 
          { return sym(Terminals.DOUBLE_LITERAL);
          }
        case 168: break;
        case 79: 
          { return sym(Terminals.LSHIFTEQ);
          }
        case 169: break;
        case 121: 
          { return sym(Terminals.NATIVE);
          }
        case 170: break;
        case 61: 
          { strbuf.append((char)Integer.parseInt(str().substring(1),8));
          }
        case 171: break;
        case 42: 
          { return sym(Terminals.PLUSEQ);
          }
        case 172: break;
        case 64: 
          { strbuf.append( '\\' );
          }
        case 173: break;
        case 87: 
          { return sym(Terminals.CHARACTER_LITERAL, "\n");
          }
        case 174: break;
        case 92: 
          { return sym(Terminals.BOOLEAN_LITERAL);
          }
        case 175: break;
        case 28: 
          { return sym(Terminals.OR);
          }
        case 176: break;
        case 138: 
          { return sym(Terminals.STRICTFP);
          }
        case 177: break;
        case 114: 
          { return sym(Terminals.ASSERT);
          }
        case 178: break;
        case 112: 
          { return sym(Terminals.FINAL);
          }
        case 179: break;
        case 106: 
          { return sym(Terminals.SUPER);
          }
        case 180: break;
        case 1: 
          { error("illegal character \""+str()+ "\"");
          }
        case 181: break;
        case 139: 
          { return sym(Terminals.EXTERNAL);
          }
        case 182: break;
        case 72: 
          { return sym(Terminals.CHARACTER_LITERAL, str().substring(1, len()-1));
          }
        case 183: break;
        case 93: 
          { return sym(Terminals.THIS);
          }
        case 184: break;
        case 23: 
          { return sym(Terminals.NOT);
          }
        case 185: break;
        case 35: 
          { return sym(Terminals.DIVEQ);
          }
        case 186: break;
        case 136: 
          { return sym(Terminals.GRANULE);
          }
        case 187: break;
        case 24: 
          { return sym(Terminals.COMP);
          }
        case 188: break;
        case 131: 
          { return sym(Terminals.DEFAULT);
          }
        case 189: break;
        case 41: 
          { return sym(Terminals.PLUSPLUS);
          }
        case 190: break;
        case 83: 
          { return sym(Terminals.CHARACTER_LITERAL, "\\");
          }
        case 191: break;
        case 120: 
          { return sym(Terminals.BEFORE);
          }
        case 192: break;
        case 56: 
          { return sym(Terminals.OREQ);
          }
        case 193: break;
        case 19: 
          { return sym(Terminals.COMMA);
          }
        case 194: break;
        case 95: 
          { return sym(Terminals.BYTE);
          }
        case 195: break;
        case 145: 
          { return sym(Terminals.PROTECTED);
          }
        case 196: break;
        case 91: 
          { return sym(Terminals.ENUM);
          }
        case 197: break;
        case 45: 
          { return sym(Terminals.DO);
          }
        case 198: break;
        case 70: 
          { return sym(Terminals.LONG_LITERAL, str().substring(0, len()-1));
          }
        case 199: break;
        case 13: 
          { return sym(Terminals.RPAREN);
          }
        case 200: break;
        case 69: 
          { strbuf.append( '\f' );
          }
        case 201: break;
        case 78: 
          { return sym(Terminals.URSHIFT);
          }
        case 202: break;
        case 26: 
          { return sym(Terminals.COLON);
          }
        case 203: break;
        case 99: 
          { return sym(Terminals.LONG);
          }
        case 204: break;
        case 66: 
          { strbuf.append( '\t' );
          }
        case 205: break;
        case 144: 
          { return sym(Terminals.INTERFACE);
          }
        case 206: break;
        case 116: 
          { return sym(Terminals.STATIC);
          }
        case 207: break;
        case 102: 
          { return sym(Terminals.VOID);
          }
        case 208: break;
        case 118: 
          { return sym(Terminals.RETURN);
          }
        case 209: break;
        case 135: 
          { return sym(Terminals.PRIVATE);
          }
        case 210: break;
        case 75: 
          { return sym(Terminals.INT);
          }
        case 211: break;
        case 32: 
          { strbuf.append(str());
          }
        case 212: break;
        case 21: 
          { return sym(Terminals.GT);
          }
        case 213: break;
        case 88: 
          { return sym(Terminals.CHARACTER_LITERAL, "\f");
          }
        case 214: break;
        case 29: 
          { return sym(Terminals.XOR);
          }
        case 215: break;
        case 85: 
          { return sym(Terminals.CHARACTER_LITERAL, "\t");
          }
        case 216: break;
        case 143: 
          { return sym(Terminals.TRANSIENT);
          }
        case 217: break;
        case 67: 
          { strbuf.append( '\b' );
          }
        case 218: break;
        case 36: 
          { return sym(Terminals.MULTEQ);
          }
        case 219: break;
        case 58: 
          { return sym(Terminals.XOREQ);
          }
        case 220: break;
        case 129: 
          { return sym(Terminals.BOOLEAN);
          }
        case 221: break;
        case 80: 
          { int val = Integer.parseInt(str().substring(2,len()-1),8);
			                             return sym(Terminals.CHARACTER_LITERAL, new Character((char)val).toString());
          }
        case 222: break;
        case 34: 
          { yybegin(YYINITIAL); return sym(Terminals.STRING_LITERAL, strbuf.toString());
          }
        case 223: break;
        case 103: 
          { return sym(Terminals.URSHIFTEQ);
          }
        case 224: break;
        case 76: 
          { return sym(Terminals.FOR);
          }
        case 225: break;
        case 22: 
          { return sym(Terminals.LT);
          }
        case 226: break;
        case 63: 
          { strbuf.append( '\"' );
          }
        case 227: break;
        case 20: 
          { return sym(Terminals.EQ);
          }
        case 228: break;
        case 90: 
          { return sym(Terminals.ELSE);
          }
        case 229: break;
        case 125: 
          { return sym(Terminals.WITHIN);
          }
        case 230: break;
        case 74: 
          { return sym(Terminals.NEW);
          }
        case 231: break;
        case 12: 
          { return sym(Terminals.LPAREN);
          }
        case 232: break;
        case 25: 
          { return sym(Terminals.QUESTION);
          }
        case 233: break;
        case 134: 
          { return sym(Terminals.PROCEED);
          }
        case 234: break;
        case 9: 
          { yybegin(STRING); strbuf.setLength(0);
          }
        case 235: break;
        case 86: 
          { return sym(Terminals.CHARACTER_LITERAL, "\b");
          }
        case 236: break;
        case 147: 
          { return sym(Terminals.IMPLEMENTS);
          }
        case 237: break;
        case 117: 
          { return sym(Terminals.SWITCH);
          }
        case 238: break;
        case 89: 
          { return sym(Terminals.SEED);
          }
        case 239: break;
        case 108: 
          { return sym(Terminals.BREAK);
          }
        case 240: break;
        case 142: 
          { return sym(Terminals.VOLATILE);
          }
        case 241: break;
        case 140: 
          { return sym(Terminals.CONTINUE);
          }
        case 242: break;
        case 97: 
          { return sym(Terminals.CHAR);
          }
        case 243: break;
        case 111: 
          { return sym(Terminals.FLOAT);
          }
        case 244: break;
        case 148: 
          { return sym(Terminals.SYNCHRONIZED);
          }
        case 245: break;
        case 49: 
          { return sym(Terminals.GTEQ);
          }
        case 246: break;
        case 73: 
          { return sym(Terminals.TRY);
          }
        case 247: break;
        case 128: 
          { return sym(Terminals.RUNTIME);
          }
        case 248: break;
        case 104: 
          { return sym(Terminals.AFTER);
          }
        case 249: break;
        case 119: 
          { return sym(Terminals.THROWS);
          }
        case 250: break;
        case 30: 
          { return sym(Terminals.MOD);
          }
        case 251: break;
        case 8: 
          { return sym(Terminals.PLUS);
          }
        case 252: break;
        case 130: 
          { return sym(Terminals.COMPILE);
          }
        case 253: break;
        case 82: 
          { return sym(Terminals.CHARACTER_LITERAL, "\"");
          }
        case 254: break;
        case 141: 
          { return sym(Terminals.PREVIOUS);
          }
        case 255: break;
        case 59: 
          { return sym(Terminals.MODEQ);
          }
        case 256: break;
        case 3: 
          { return sym(Terminals.DIV);
          }
        case 257: break;
        case 54: 
          { return sym(Terminals.ANDEQ);
          }
        case 258: break;
        case 18: 
          { return sym(Terminals.SEMICOLON);
          }
        case 259: break;
        case 81: 
          { return sym(Terminals.CHARACTER_LITERAL, "\'");
          }
        case 260: break;
        case 77: 
          { return sym(Terminals.RSHIFTEQ);
          }
        case 261: break;
        case 6: 
          { return sym(Terminals.INTEGER_LITERAL);
          }
        case 262: break;
        case 10: 
          { return sym(Terminals.MINUS);
          }
        case 263: break;
        case 50: 
          { return sym(Terminals.RSHIFT);
          }
        case 264: break;
        case 126: 
          { return sym(Terminals.EXTENDS);
          }
        case 265: break;
        case 55: 
          { return sym(Terminals.ANDAND);
          }
        case 266: break;
        case 27: 
          { return sym(Terminals.AND);
          }
        case 267: break;
        case 94: 
          { return sym(Terminals.BASE);
          }
        case 268: break;
        case 133: 
          { return sym(Terminals.PACKAGE);
          }
        case 269: break;
        case 123: 
          { return sym(Terminals.DOUBLE);
          }
        case 270: break;
        case 17: 
          { return sym(Terminals.RBRACK);
          }
        case 271: break;
        case 100: 
          { return sym(Terminals.NULL_LITERAL);
          }
        case 272: break;
        case 127: 
          { return sym(Terminals.EXPANDS);
          }
        case 273: break;
        case 101: 
          { return sym(Terminals.EOF);
          }
        case 274: break;
        case 4: 
          { return sym(Terminals.MULT);
          }
        case 275: break;
        case 107: 
          { return sym(Terminals.THROW);
          }
        case 276: break;
        case 113: 
          { return sym(Terminals.WHILE);
          }
        case 277: break;
        case 146: 
          { return sym(Terminals.INSTANCEOF);
          }
        case 278: break;
        case 5: 
          { return sym(Terminals.IDENTIFIER);
          }
        case 279: break;
        case 132: 
          { return sym(Terminals.FINALLY);
          }
        case 280: break;
        case 105: 
          { return sym(Terminals.SHORT);
          }
        case 281: break;
        case 52: 
          { return sym(Terminals.LSHIFT);
          }
        case 282: break;
        case 15: 
          { return sym(Terminals.RBRACE);
          }
        case 283: break;
        case 31: 
          { if(sub_line == 0 && sub_column == 0) {
                                     sub_line = yyline; sub_column = yycolumn;
                                   }
          }
        case 284: break;
        case 57: 
          { return sym(Terminals.OROR);
          }
        case 285: break;
        case 51: 
          { return sym(Terminals.LTEQ);
          }
        case 286: break;
        case 109: 
          { return sym(Terminals.CATCH);
          }
        case 287: break;
        case 47: 
          { return sym(Terminals.MINUSEQ);
          }
        case 288: break;
        case 65: 
          { strbuf.append( '\r' );
          }
        case 289: break;
        case 48: 
          { return sym(Terminals.EQEQ);
          }
        case 290: break;
        case 43: 
          { error("unterminated character literal at end of line");
          }
        case 291: break;
        case 44: 
          { return sym(Terminals.IF);
          }
        case 292: break;
        case 124: 
          { return sym(Terminals.PUBLIC);
          }
        case 293: break;
        case 38: 
          { return sym(Terminals.LONG_LITERAL, str().substring(0,len()-1));
          }
        case 294: break;
        case 115: 
          { return sym(Terminals.AROUND);
          }
        case 295: break;
        case 46: 
          { return sym(Terminals.MINUSMINUS);
          }
        case 296: break;
        case 110: 
          { return sym(Terminals.CLASS);
          }
        case 297: break;
        case 2: 
          { 
          }
        case 298: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
              { // detect position of first SUB character
                                   if(!(sub_line == 0 && sub_column == 0) && (sub_line != yyline || sub_column != yycolumn-1)) {
                                     // reset to only return error once
                                     sub_line = 0;
                                     sub_column = 0;
                                     // return error
                                     error("error");
                                   }
                                   return sym(Terminals.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
