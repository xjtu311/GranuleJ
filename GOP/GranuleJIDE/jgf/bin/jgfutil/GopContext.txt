
import java.io.File;
import java.io.FileInputStream;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.transform.Source;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;

import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

public class GopContext {
	private static String path;
	private static Document document;
	private static Transformer transformer;
	private static StreamResult result;
	private static DocumentBuilder builder;

	static{
		try {
			String place = System.getProperty("user.dir");

			place = place + "/bin/";
			System.out.println("place:" + place);
			path = place + "UserClasses.xml";
			
			File dirFile = new File(place);
			if (!dirFile.exists()) {
				dirFile.mkdir();
			}
			path = place + "UserClasses.xml";
	
			if (!new File(path).exists()) {
				Document doc = DocumentBuilderFactory.newInstance()
						.newDocumentBuilder().newDocument();
				Element root = doc.createElement("userclass");
				doc.appendChild(root);
				writeXML(doc, path);
			}
			builder = DocumentBuilderFactory.newInstance()
					.newDocumentBuilder();
			document = builder.parse(new FileInputStream(path));
			transformer = TransformerFactory.newInstance().newTransformer();
			result = new StreamResult(new File(path));
			
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	
	public static synchronized void addContext(String name, String value) {
		try {
			document = builder.parse(new FileInputStream(path));
			Element rootElement = document.getDocumentElement();
			NodeList nodes = rootElement.getChildNodes();
        //    System.out.print(nodes.getLength());
			for (int i = 0; i < nodes.getLength(); i++) {
				Node node = nodes.item(i);
				System.out.println(node.toString());
				if (node instanceof Element) {
					Element child = (Element) node;
					Element newchild = document.createElement("shadowclass");
					newchild.setAttribute("name", name);
					newchild.setAttribute("value", value);
					child.appendChild(newchild);
					break;
				}
			}
			//Element child = document.createElement("variable");
			//child.setAttribute("name", name);
			//child.setAttribute("value", value);
			//rootElement.appendChild(child);
		//	nodes.item(0).appendChild(child);
			Source source = new DOMSource(document);
			transformer.transform(source, result);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	
	private static void writeXML(Document doc, String path) {
		try {
			File f = new File(path);
			Transformer transformer = TransformerFactory.newInstance()
					.newTransformer();
			DOMSource source = new DOMSource(doc);
			StreamResult result = new StreamResult(f);
			transformer.transform(source, result);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	public static synchronized String getLocalIP(){  
	    java.net.InetAddress addr = null;  
	            try {  
	                addr = java.net.InetAddress.getLocalHost();  
	            } catch (java.net.UnknownHostException e) {  
	                e.printStackTrace();  
	                            return null;  
	            }  
	            byte[] ipAddr = addr.getAddress();  
	            String ipAddrStr = "";  
	            for (int i = 0; i < ipAddr.length; i++) {  
	                if (i > 0) {  
	                    ipAddrStr += ".";  
	                }  
	                ipAddrStr += ipAddr[i] & 0xFF;  
	            }   
	                 return ipAddrStr;  
	    } 
	
	public static void main(String argv[]){
		addContext("name","g7%abc");
	}

}

